{"ast":null,"code":"var _jsxFileName = \"/Users/namduong/Documents/dev/shop-project/src/components/chat.js\";\nimport React from 'react';\nimport $ from 'jquery';\nimport Messages from './message-list';\nimport Input from './input';\nimport _map from 'lodash/map';\nimport io from 'socket.io-client';\nimport './App.css';\nexport default class chat extends React.Component {\n  constructor(props) {\n    super(props); //Khởi tạo state,\n\n    this.state = {\n      messages: [{\n        id: 1,\n        userId: 0,\n        message: 'Hello'\n      }],\n      user: null\n    };\n    this.socket = null;\n  } //Connetct với server nodejs, thông qua socket.io\n\n\n  componentWillMount() {\n    this.socket = io('localhost:4000');\n    this.socket.on('id', res => this.setState({\n      user: res\n    })); // lắng nghe event có tên 'id'\n\n    this.socket.on('newMessage', response => {\n      this.newMessage(response);\n    }); //lắng nghe event 'newMessage' và gọi hàm newMessage khi có event\n  } //Khi có tin nhắn mới, sẽ push tin nhắn vào state mesgages, và nó sẽ được render ra màn hình\n\n\n  newMessage(m) {\n    const messages = this.state.messages;\n\n    let ids = _map(messages, 'id');\n\n    let max = Math.max(...ids);\n    messages.push({\n      id: max + 1,\n      userId: m.id,\n      message: m.data\n    });\n    let objMessage = $('.messages');\n\n    if (objMessage[0].scrollHeight - objMessage[0].scrollTop === objMessage[0].clientHeight) {\n      this.setState({\n        messages\n      });\n      objMessage.animate({\n        scrollTop: objMessage.prop('scrollHeight')\n      }, 300); //tạo hiệu ứng cuộn khi có tin nhắn mới\n    } else {\n      this.setState({\n        messages\n      });\n\n      if (m.id === this.state.user) {\n        objMessage.animate({\n          scrollTop: objMessage.prop('scrollHeight')\n        }, 300);\n      }\n    }\n  } //Gửi event socket newMessage với dữ liệu là nội dung tin nhắn\n\n\n  sendnewMessage(m) {\n    if (m.value) {\n      this.socket.emit(\"newMessage\", m.value); //gửi event về server\n\n      m.value = \"\";\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app__content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 14\n      }\n    }, \"chat box\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat_window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(Messages, {\n      user: this.state.user,\n      messages: this.state.messages,\n      typing: this.state.typing,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      sendMessage: this.sendnewMessage.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 18\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/namduong/Documents/dev/shop-project/src/components/chat.js"],"names":["React","$","Messages","Input","_map","io","chat","Component","constructor","props","state","messages","id","userId","message","user","socket","componentWillMount","on","res","setState","response","newMessage","m","ids","max","Math","push","data","objMessage","scrollHeight","scrollTop","clientHeight","animate","prop","sendnewMessage","value","emit","render","typing","bind"],"mappings":"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","sourcesContent":["import React from 'react';\nimport $ from 'jquery';\nimport Messages from './message-list';\nimport Input from './input';\nimport _map from 'lodash/map';\nimport io from 'socket.io-client';\n\nimport './App.css';\n\nexport default class chat extends React.Component {\n   constructor(props) {\n       super(props);\n       //Khởi tạo state,\n       this.state = {\n           messages: [\n               {id: 1, userId: 0, message: 'Hello'}\n           ],\n           user: null,\n       }\n       this.socket = null;\n   }\n   //Connetct với server nodejs, thông qua socket.io\n   componentWillMount() {\n       this.socket = io('localhost:4000');\n       this.socket.on('id', res => this.setState({user: res})) // lắng nghe event có tên 'id'\n       this.socket.on('newMessage', (response) => {this.newMessage(response)}); //lắng nghe event 'newMessage' và gọi hàm newMessage khi có event\n   }\n   //Khi có tin nhắn mới, sẽ push tin nhắn vào state mesgages, và nó sẽ được render ra màn hình\n   newMessage(m) {\n       const messages = this.state.messages;\n       let ids = _map(messages, 'id');\n       let max = Math.max(...ids);\n       messages.push({\n           id: max+1,\n           userId: m.id,\n           message: m.data\n       });\n\n       let objMessage = $('.messages');\n       if (objMessage[0].scrollHeight - objMessage[0].scrollTop === objMessage[0].clientHeight ) {\n           this.setState({messages});\n           objMessage.animate({ scrollTop: objMessage.prop('scrollHeight') }, 300); //tạo hiệu ứng cuộn khi có tin nhắn mới\n\n       } else {\n           this.setState({messages});\n           if (m.id === this.state.user) {\n               objMessage.animate({ scrollTop: objMessage.prop('scrollHeight') }, 300);\n           }\n       }\n   }\n   //Gửi event socket newMessage với dữ liệu là nội dung tin nhắn\n   sendnewMessage(m) {\n       if (m.value) {\n           this.socket.emit(\"newMessage\", m.value); //gửi event về server\n           m.value = \"\"; \n       }\n   }\n\n   render () {\n       return (\n          <div className=\"app__content\">\n             <h1>chat box</h1>\n             <div className=\"chat_window\">\n                 <Messages user={this.state.user} messages={this.state.messages} typing={this.state.typing}/>\n                 <Input sendMessage={this.sendnewMessage.bind(this)}/>\n             </div>\n           </div>\n       )\n   }\n}"]},"metadata":{},"sourceType":"module"}