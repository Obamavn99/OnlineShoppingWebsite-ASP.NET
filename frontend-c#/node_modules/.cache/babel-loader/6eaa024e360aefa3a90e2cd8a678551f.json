{"ast":null,"code":"var _jsxFileName = \"/Users/namduong/Documents/dev/shop-project/frontend/src/components/admin/Dashboard/DashboardInbox.js\";\nimport React from 'react';\nimport '../../../App.css';\nimport '../../../Styles/Dashboard.css';\nimport { useEffect, useState } from 'react';\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"http://localhost:4000\";\nexport default function DashboardInbox(props) {\n  const [allChatData, setAllChatData] = useState([]);\n  const [chatContent, setChatContent] = useState([]);\n  const [roomId, setRoomId] = useState(0);\n  const [chatInput, setChatInput] = useState(\"\");\n  const socket = socketIOClient(ENDPOINT);\n  useEffect(() => {\n    socket.on('connect', function (data) {\n      socket.emit('admin-join', 'admin joining...');\n    });\n    socket.on('send-all-chat', data => {\n      setAllChatData(data);\n    });\n    socket.on(\"client-msg\", function (data) {\n      setAllChatData(allChatData => [...allChatData, data[0]]);\n    });\n  }, []);\n\n  const handleOnChange = event => {\n    setChatInput(event.target.value);\n  };\n\n  const sendChatInput = event => {\n    event.preventDefault();\n    socket.emit('messageSend-admin', {\n      chatInput: chatInput,\n      roomId: roomId\n    });\n  };\n\n  const merge = (a, b) => {\n    var hash = {};\n    var i;\n\n    for (i = 0; i < a.length; i++) {\n      hash[a[i]] = true;\n    }\n\n    for (i = 0; i < b.length; i++) {\n      hash[b[i]] = true;\n    }\n\n    return Object.keys(hash);\n  };\n\n  console.log(allChatData);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxchat-admin flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxchat-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxchat-search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  })), allChatData.length > 0 && allChatData.map((item, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      key: index,\n      className: \"boxchat-item flex-col\",\n      onClick: () => {\n        setChatContent(item.chatContent);\n        setRoomId(item.sessionId);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 29\n      }\n    }, item.chatName, item.chatContent[0].text);\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxchat-main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxchat-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, chatContent.map((item, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 33\n      }\n    }, item.text);\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxchat-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: sendChatInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: handleOnChange,\n    name: \"chatInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  }, \"Send\"))))) // allChatData.map((item, index)=> {\n  //     return (\n  //         <div \n  //             key={index} className=\"flex\"\n  //             onClick={()=>{\n  //                 setSessionId(item.sessionId)\n  //                 console.log(item.sessionId)\n  //                 socket.on('connect', function (data) {\n  //                     socket.emit('sendRoomId', sessionId);\n  //                 })\n  //             }}\n  //         >\n  //             <p>{item.chatName}</p>\n  //             <p>{item.chatEmail}</p>\n  //             {/* {item.chatContent.map((item,index)=>{\n  //                 return (\n  //                     <div key={index}>\n  //                         <p>{item.text}</p>\n  //                         <p>{item.date}</p>\n  //                     </div>\n  //                 )\n  //             })} */}\n  //         </div>\n  //     )\n  // })\n  ;\n}","map":{"version":3,"sources":["/Users/namduong/Documents/dev/shop-project/frontend/src/components/admin/Dashboard/DashboardInbox.js"],"names":["React","useEffect","useState","socketIOClient","ENDPOINT","DashboardInbox","props","allChatData","setAllChatData","chatContent","setChatContent","roomId","setRoomId","chatInput","setChatInput","socket","on","data","emit","handleOnChange","event","target","value","sendChatInput","preventDefault","merge","a","b","hash","i","length","Object","keys","console","log","map","item","index","sessionId","chatName","text"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,kBAAP;AACA,OAAO,+BAAP;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,QAAQ,GAAG,uBAAjB;AAEA,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC1C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAMa,MAAM,GAAGZ,cAAc,CAACC,QAAD,CAA7B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAqB,UAAUC,IAAV,EAAgB;AACjCF,MAAAA,MAAM,CAACG,IAAP,CAAY,YAAZ,EAA0B,kBAA1B;AACH,KAFD;AAGAH,IAAAA,MAAM,CAACC,EAAP,CAAU,eAAV,EAA4BC,IAAD,IAAQ;AAC/BT,MAAAA,cAAc,CAACS,IAAD,CAAd;AACH,KAFD;AAGAF,IAAAA,MAAM,CAACC,EAAP,CAAU,YAAV,EAAwB,UAASC,IAAT,EAAe;AACnCT,MAAAA,cAAc,CAACD,WAAW,IAAG,CAAC,GAAGA,WAAJ,EAAiBU,IAAI,CAAC,CAAD,CAArB,CAAf,CAAd;AACH,KAFD;AAGH,GAVQ,EAUP,EAVO,CAAT;;AAYA,QAAME,cAAc,GAAIC,KAAD,IAAW;AAC9BN,IAAAA,YAAY,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;AACH,GAFD;;AAIA,QAAMC,aAAa,GAAIH,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACI,cAAN;AACAT,IAAAA,MAAM,CAACG,IAAP,CAAY,mBAAZ,EAAiC;AAC7BL,MAAAA,SAAS,EAAEA,SADkB;AAE7BF,MAAAA,MAAM,EAAEA;AAFqB,KAAjC;AAIH,GAND;;AAOA,QAAMc,KAAK,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACpB,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,CAAJ;;AAEA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,CAAC,CAACI,MAAlB,EAA0BD,CAAC,EAA3B,EAA+B;AAC7BD,MAAAA,IAAI,CAACF,CAAC,CAACG,CAAD,CAAF,CAAJ,GAAa,IAAb;AACD;;AACD,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,CAAC,CAACG,MAAlB,EAA0BD,CAAC,EAA3B,EAA+B;AAC7BD,MAAAA,IAAI,CAACD,CAAC,CAACE,CAAD,CAAF,CAAJ,GAAa,IAAb;AACD;;AACD,WAAOE,MAAM,CAACC,IAAP,CAAYJ,IAAZ,CAAP;AACD,GAXH;;AAaAK,EAAAA,OAAO,CAACC,GAAR,CAAY3B,WAAZ;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAIMA,WAAW,CAACuB,MAAZ,GAAqB,CAArB,IACEvB,WAAW,CAAC4B,GAAZ,CAAgB,CAACC,IAAD,EAAMC,KAAN,KAAc;AAC1B,wBACI;AACI,MAAA,GAAG,EAAEA,KADT;AAEI,MAAA,GAAG,EAAEA,KAFT;AAGI,MAAA,SAAS,EAAC,uBAHd;AAII,MAAA,OAAO,EAAE,MAAI;AACT3B,QAAAA,cAAc,CAAC0B,IAAI,CAAC3B,WAAN,CAAd;AACAG,QAAAA,SAAS,CAACwB,IAAI,CAACE,SAAN,CAAT;AACH,OAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASKF,IAAI,CAACG,QATV,EAUKH,IAAI,CAAC3B,WAAL,CAAiB,CAAjB,EAAoB+B,IAVzB,CADJ;AAcH,GAfD,CALR,CADJ,eAwBI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ/B,WAAW,CAAC0B,GAAZ,CAAgB,CAACC,IAAD,EAAOC,KAAP,KAAe;AAC3B,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,IAAI,CAACI,IADV,CADJ;AAKH,GAND,CAFR,CADJ,eAYI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAM,IAAA,QAAQ,EAAEjB,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAEJ,cAA7B;AAA6C,IAAA,IAAI,EAAC,WAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,CADJ,CAZJ,CAxBJ,CADJ,CA6CI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArEJ;AAuEH","sourcesContent":["import React from 'react'\nimport '../../../App.css'\nimport '../../../Styles/Dashboard.css'\nimport { useEffect, useState } from 'react'\nimport socketIOClient from \"socket.io-client\";\n\nconst ENDPOINT = \"http://localhost:4000\";\n\nexport default function DashboardInbox(props) {\n    const [allChatData, setAllChatData] = useState([])\n    const [chatContent, setChatContent] = useState([])\n    const [roomId, setRoomId] = useState(0);\n    const [chatInput, setChatInput] = useState(\"\")\n\n    const socket = socketIOClient(ENDPOINT);\n\n    useEffect(() => {\n        socket.on('connect', function (data) {\n            socket.emit('admin-join', 'admin joining...')\n        })\n        socket.on('send-all-chat', (data)=>{\n            setAllChatData(data)\n        })\n        socket.on(\"client-msg\", function(data) {\n            setAllChatData(allChatData=> [...allChatData, data[0]])\n        })\n    },[])\n\n    const handleOnChange = (event) => {\n        setChatInput(event.target.value)\n    }\n\n    const sendChatInput = (event) => {\n        event.preventDefault();\n        socket.emit('messageSend-admin', {\n            chatInput: chatInput,\n            roomId: roomId\n        });\n    }\n    const merge = (a, b) => {\n        var hash = {};\n        var i;\n        \n        for (i = 0; i < a.length; i++) {\n          hash[a[i]] = true;\n        }\n        for (i = 0; i < b.length; i++) {\n          hash[b[i]] = true;\n        }\n        return Object.keys(hash);\n      }\n\n    console.log(allChatData)\n\n    return (\n        <div className=\"boxchat-admin flex\">\n            <div className=\"boxchat-list\">\n                <div className=\"boxchat-search\">\n                    <input type=\"text\"></input>\n                </div>\n                { allChatData.length > 0 && \n                    allChatData.map((item,index)=>{\n                        return (\n                            <div \n                                key={index} \n                                key={index}\n                                className=\"boxchat-item flex-col\"\n                                onClick={()=>{\n                                    setChatContent(item.chatContent)\n                                    setRoomId(item.sessionId)\n                                }}\n                            >\n                                {item.chatName}\n                                {item.chatContent[0].text}\n                            </div>\n                        )\n                    })\n                }\n            </div>\n            <div className=\"boxchat-main\">\n                <div className=\"boxchat-box\">\n                    {\n                        chatContent.map((item, index)=>{\n                            return(\n                                <div>\n                                    {item.text}\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n                <div className=\"boxchat-type\">\n                    <form onSubmit={sendChatInput}>\n                        <input type=\"text\" onChange={handleOnChange} name=\"chatInput\"></input>\n                        <button>Send</button>\n                    </form>\n                </div>\n            </div>\n        </div>\n        // allChatData.map((item, index)=> {\n        //     return (\n        //         <div \n        //             key={index} className=\"flex\"\n        //             onClick={()=>{\n        //                 setSessionId(item.sessionId)\n        //                 console.log(item.sessionId)\n        //                 socket.on('connect', function (data) {\n        //                     socket.emit('sendRoomId', sessionId);\n        //                 })\n        //             }}\n        //         >\n        //             <p>{item.chatName}</p>\n        //             <p>{item.chatEmail}</p>\n        //             {/* {item.chatContent.map((item,index)=>{\n        //                 return (\n        //                     <div key={index}>\n        //                         <p>{item.text}</p>\n        //                         <p>{item.date}</p>\n        //                     </div>\n        //                 )\n        //             })} */}\n        //         </div>\n        //     )\n        // })\n    )\n}"]},"metadata":{},"sourceType":"module"}