{"ast":null,"code":"var _jsxFileName = \"/Users/namduong/Documents/dev/shop-project/frontend/src/components/OpenChatBtn.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../Styles/Chat.css';\nimport '../App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faComment, faPaperPlane } from '@fortawesome/free-solid-svg-icons';\nimport socketIOClient from \"socket.io-client\";\nimport { withRouter } from 'react-router-dom';\nconst ENDPOINT = \"http://localhost:4000\";\n\nfunction OpenChatBtn(props) {\n  const messageRef = useRef();\n  const [openChat, setOpenChat] = useState(false);\n  const [onHover, setOnHover] = useState(false);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [openChatContent, setOpenChatContent] = useState(false);\n  const socket = socketIOClient(ENDPOINT);\n  const [chatList, setChatList] = useState([]);\n  useEffect(() => {\n    if (sessionStorage.getItem('chat-id')) setOpenChatContent(true);\n    socket.on('connect', function (data) {\n      socket.emit('join', {\n        sessionId: sessionStorage.getItem('chat-id')\n      });\n      socket.on('sendFirstInfo', data => {\n        if (data.length > 0) setChatList(data[0].chatContent);\n      });\n      socket.on('thread', data => {\n        setChatList(data.chatContent);\n      });\n      socket.on(\"admin-msg\", function (data) {\n        setChatList(chatList => [...chatList, data]);\n      });\n    });\n    messageRef.current.scrollTo({\n      top: messageRef.current.scrollHeight,\n      left: 0,\n      behavior: \"smooth\"\n    });\n  }, []);\n\n  const handleChange = event => {\n    setInputValue({ ...inputValue,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const location = props.history.location.pathname;\n\n  const sendFirstChatOnSubmit = event => {\n    event.preventDefault();\n    setOpenChatContent(true);\n\n    if (!sessionStorage.getItem('chat-id')) {\n      sessionStorage.setItem('chat-id', Math.floor(Math.random() * 190000000) + 100000000);\n    }\n\n    socket.emit('firstMessage', {\n      sessionId: sessionStorage.getItem('chat-id'),\n      chatName: inputValue.chatName,\n      chatEmail: inputValue.chatEmail,\n      chatContent: [{\n        text: inputValue.chatContent,\n        time: new Date()\n      }]\n    });\n    setChatList(chatList => [...chatList, {\n      text: inputValue.chatContent,\n      time: new Date()\n    }]);\n  };\n\n  const sendChatOnSubmit = event => {\n    event.preventDefault();\n    socket.emit('messageSend', {\n      sessionId: sessionStorage.getItem('chat-id'),\n      text: inputValue.messageSend,\n      time: new Date()\n    });\n    setChatList(chatList => [...chatList, {\n      text: inputValue.messageSend,\n      time: new Date()\n    }]); // messageRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: location === \"/admin\" || location === \"/admin/dashboard\" ? \"chat-btn displayNone\" : \"chat-btn\",\n    onMouseEnter: () => {\n      setOnHover(true);\n    },\n    onMouseLeave: () => {\n      if (openChat) {\n        setOnHover(true);\n      } else setOnHover(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: onHover ? \"chat-btn-container chat-btn-hover\" : \"chat-btn-container\",\n    onClick: () => {\n      // messageRef.current.scrollIntoView({ behavior: \"smooth\" });\n      if (openChat) {\n        setOpenChat(false);\n        setOnHover(false);\n      } else {\n        setOpenChat(true);\n        setOnHover(true);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, \"Live Chat\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: openChat ? \"chat-box hide_chat_box\" : \"chat-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-box-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, \"Live Chat\"), openChatContent === false && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-box-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: sendFirstChatOnSubmit,\n    className: openChat ? \"form-chat hide_chat_box_item\" : \"form-chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 29\n    }\n  }, \"Introduce yourself *\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"chatName\",\n    type: \"text\",\n    onChange: handleChange,\n    placeholder: \"Name\",\n    className: \"intro\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"chatEmail\",\n    type: \"text\",\n    onChange: handleChange,\n    placeholder: \"Email\",\n    className: \"intro\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 29\n    }\n  }, \"Message *\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"chatContent\",\n    type: \"textarea\",\n    onChange: handleChange,\n    className: \"message\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 29\n    }\n  }, \"Chat\"))), chatList.length > 0 && openChatContent && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-box-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: sendChatOnSubmit,\n    className: openChat ? \"form-chat hide_chat_box_item\" : \"form-chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-col chat-box-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 29\n    }\n  }, chatList.map((item, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      ref: messageRef,\n      id: \"boxchat\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 45\n      }\n    }, item.text);\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex chat-box-send\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"messageSend\",\n    type: \"text\",\n    onChange: handleChange,\n    placeholder: \"Make a message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"flex-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPaperPlane,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 37\n    }\n  })))))));\n}\n\nexport default withRouter(OpenChatBtn);","map":{"version":3,"sources":["/Users/namduong/Documents/dev/shop-project/frontend/src/components/OpenChatBtn.js"],"names":["React","useEffect","useRef","useState","FontAwesomeIcon","faComment","faPaperPlane","socketIOClient","withRouter","ENDPOINT","OpenChatBtn","props","messageRef","openChat","setOpenChat","onHover","setOnHover","inputValue","setInputValue","openChatContent","setOpenChatContent","socket","chatList","setChatList","sessionStorage","getItem","on","data","emit","sessionId","length","chatContent","current","scrollTo","top","scrollHeight","left","behavior","handleChange","event","target","name","value","location","history","pathname","sendFirstChatOnSubmit","preventDefault","setItem","Math","floor","random","chatName","chatEmail","text","time","Date","sendChatOnSubmit","messageSend","map","item","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport '../Styles/Chat.css'\nimport '../App.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faComment, faPaperPlane } from '@fortawesome/free-solid-svg-icons'\nimport socketIOClient from \"socket.io-client\"\nimport { withRouter } from 'react-router-dom'\n\nconst ENDPOINT = \"http://localhost:4000\";\n\nfunction OpenChatBtn(props) {\n    const messageRef = useRef();\n    const [openChat, setOpenChat] = useState(false)\n    const [onHover, setOnHover] = useState(false)\n    const [inputValue, setInputValue] = useState(\"\")\n    const [openChatContent, setOpenChatContent] = useState(false)\n\n    const socket = socketIOClient(ENDPOINT)\n    const [chatList, setChatList] = useState([])\n\n    useEffect(() => {\n        if (sessionStorage.getItem('chat-id')) setOpenChatContent(true)\n        socket.on('connect', function (data) {\n            socket.emit('join', {\n                sessionId: sessionStorage.getItem('chat-id')\n            })\n            socket.on('sendFirstInfo', (data)=> {\n                if (data.length > 0) setChatList(data[0].chatContent)\n            })\n            socket.on('thread', (data)=> {\n                setChatList(data.chatContent)\n            })\n            socket.on(\"admin-msg\", function(data) {\n                setChatList(chatList=> [...chatList, data])\n            })\n        })\n        messageRef.current.scrollTo({\n            top: messageRef.current.scrollHeight,\n            left: 0,\n            behavior: \"smooth\"\n          })\n    }, [])\n\n    const handleChange = (event) => {\n        setInputValue({...inputValue , [event.target.name]: event.target.value})\n    }\n    const location = props.history.location.pathname;\n\n    const sendFirstChatOnSubmit = (event) => {\n        event.preventDefault()\n        setOpenChatContent(true)\n        if (!sessionStorage.getItem('chat-id')) {\n            sessionStorage.setItem('chat-id', Math.floor(Math.random() * 190000000) + 100000000);\n        }\n        socket.emit('firstMessage', {\n            sessionId: sessionStorage.getItem('chat-id'),\n            chatName: inputValue.chatName,\n            chatEmail: inputValue.chatEmail,\n            chatContent: [\n                {\n                    text: inputValue.chatContent,\n                    time: new Date()\n                }\n            ]\n        })\n        setChatList(chatList=> [...chatList, {\n            text: inputValue.chatContent,\n            time: new Date()\n        }])\n    }\n\n    const sendChatOnSubmit = (event) => {\n        event.preventDefault();\n        socket.emit('messageSend', {\n            sessionId: sessionStorage.getItem('chat-id'),\n            text: inputValue.messageSend,\n            time: new Date(),\n        });\n        setChatList(chatList=> [...chatList, {text: inputValue.messageSend, time: new Date()}])\n        // messageRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    return (\n        <div \n            className={location === \"/admin\" || location === \"/admin/dashboard\" ? \"chat-btn displayNone\" : \"chat-btn\"}\n            onMouseEnter={()=> { setOnHover(true) }}\n            onMouseLeave={()=> { if (openChat) { setOnHover(true) } else setOnHover(false) }}\n        >\n            <div \n                className={onHover ? \"chat-btn-container chat-btn-hover\" : \"chat-btn-container\"}\n                onClick={()=>{\n                    // messageRef.current.scrollIntoView({ behavior: \"smooth\" });\n                    if (openChat) { \n                        setOpenChat(false); \n                        setOnHover(false) \n                    } else { \n                        setOpenChat(true); \n                        setOnHover(true) \n                    }\n                }}\n                >\n                <FontAwesomeIcon icon={faComment}/>\n                <p>Live Chat</p>\n            </div>\n            <div className={openChat ? \"chat-box hide_chat_box\" : \"chat-box\"}>\n                <div className=\"chat-box-header\">\n                    Live Chat\n                </div>\n                { openChatContent === false &&  \n                    <div className=\"chat-box-body\">\n                        <form onSubmit={sendFirstChatOnSubmit} className={openChat ? \"form-chat hide_chat_box_item\" : \"form-chat\"}>\n                            <label>Introduce yourself *</label>\n                            <input name=\"chatName\" type=\"text\" onChange={handleChange} placeholder=\"Name\" className=\"intro\" required></input>\n                            <input name=\"chatEmail\" type=\"text\" onChange={handleChange} placeholder=\"Email\" className=\"intro\" required></input>\n                            <label>Message *</label>\n                            <textarea name=\"chatContent\" type=\"textarea\" onChange={handleChange} className=\"message\" required></textarea>\n                            <button className=\"btn\">Chat</button>\n                        </form>\n                    </div>\n                }\n                { (chatList.length > 0 && openChatContent) && \n                    <div className=\"chat-box-body\">\n                        <form onSubmit={sendChatOnSubmit} className={openChat ? \"form-chat hide_chat_box_item\" : \"form-chat\"}>\n                            {/* <div className=\"chat-box-user flex\" style={{background: '#ddd', width:'100%'}}>\n                                <label>{chatData.chatName}</label>\n                                <label>{chatData.chatTime}</label>\n                                <label>{chatData.chatEmail}</label>\n                            </div>   */}\n                            <div className=\"flex-col chat-box-list\">\n                                {\n                                    chatList.map((item, index) => {\n                                        return (\n                                            <div key={index} ref={messageRef} id=\"boxchat\">\n                                                {item.text}\n                                            </div>\n                                        )\n                                    })\n                                }\n                            </div>  \n                            <div className=\"flex chat-box-send\">\n                                <input name=\"messageSend\" type=\"text\" onChange={handleChange} placeholder=\"Make a message\"></input>\n                                <button className=\"flex-center\">\n                                    <FontAwesomeIcon icon={faPaperPlane}/>\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(OpenChatBtn);"]},"metadata":{},"sourceType":"module"}