{"ast":null,"code":"var _jsxFileName = \"/Users/namduong/Documents/dev/shop-project/frontend/src/components/admin/Dashboard/Main/DashboardChart.js\";\nimport React, { useEffect, useState } from 'react';\nimport '../../../../App.css';\nimport '../../../../Styles/Dashboard.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGlobe } from '@fortawesome/free-solid-svg-icons';\nimport { Doughnut } from \"react-chartjs-2\";\nimport axios from 'axios';\nexport default function DashboardChart(props) {\n  const order = props.order;\n  const [productList, setProductList] = useState([]);\n  useEffect(() => {\n    if (order.length > 0) {\n      const productList = [];\n\n      for (let i in order) {\n        for (let j in order[i].orderList) {\n          productList.push(order[i].orderList[j]);\n        }\n      }\n\n      productList.map(item => {\n        axios.get(`http://pe.heromc.net:4000/products/${item.id}`).then(res => {\n          const isExists = (cartItems = [], item = {}) => {\n            for (let cartItem of cartItems) {\n              if (cartItem._id === item._id) {\n                return cartItem;\n              }\n            }\n\n            return false;\n          };\n\n          if (res.data) {\n            res.data.amount = item.amount;\n          }\n\n          console.log(res.data);\n          const virtualCart = [...res.data];\n\n          if (res.data.length === 0) {\n            virtualCart.push({ ...JSON.parse(value),\n              count: 1\n            });\n          } else {\n            if (!isExists(res.data, JSON.parse(value))) {\n              virtualCart.push({ ...JSON.parse(value),\n                count: 1\n              });\n            } else {\n              for (let i = 0; i < virtualCart.length; i++) {\n                if (virtualCart[i]._id === JSON.parse(value)._id) {\n                  virtualCart[i].count += 1;\n                  break;\n                }\n              }\n            }\n          }\n\n          setProductList(virtualCart);\n        });\n      });\n    } //     const productListTotal = []\n    //     for (let i in productList) { \n    //         for (let j in productList) {\n    //             if (productList[i].id === productList[i+1].id) {\n    //                 console.log(\"c\")\n    //             }\n    //         }\n    //     }\n    // }\n\n  }, [props.order]); // console.log(productList)\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart flex-col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"headerbox flex-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faGlobe,\n    className: \"icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-location-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"headerbox-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }, \"Global Sales by Top Categories\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-location-content flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-location-map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Doughnut, {\n    data: {\n      labels: [\"Africa\", \"Asia\", \"Europe\", \"Latin America\", \"North America\"],\n      datasets: [{\n        label: \"Population (millions)\",\n        backgroundColor: [\"#3e95cd\", \"#8e5ea2\", \"#3cba9f\", \"#e8c3b9\", \"#c45850\"],\n        data: [2478, 5267, 734, 784, 433]\n      }]\n    },\n    option: {\n      title: {\n        display: true,\n        text: \"Predicted world population (millions) in 2050\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/namduong/Documents/dev/shop-project/frontend/src/components/admin/Dashboard/Main/DashboardChart.js"],"names":["React","useEffect","useState","FontAwesomeIcon","faGlobe","Doughnut","axios","DashboardChart","props","order","productList","setProductList","length","i","j","orderList","push","map","item","get","id","then","res","isExists","cartItems","cartItem","_id","data","amount","console","log","virtualCart","JSON","parse","value","count","labels","datasets","label","backgroundColor","title","display","text"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport '../../../../App.css'\nimport '../../../../Styles/Dashboard.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGlobe } from '@fortawesome/free-solid-svg-icons'\nimport { Doughnut } from \"react-chartjs-2\";\nimport axios from 'axios'\n\nexport default function DashboardChart(props) {\n\n    const order = props.order\n    const [productList, setProductList] = useState([])\n\n    useEffect(()=>{\n        if (order.length > 0) { \n            const productList = []\n            for (let i in order) {\n                for (let j in order[i].orderList) {\n                    productList.push(order[i].orderList[j])\n                }\n            }\n            productList.map((item)=>{ \n                axios.get(`http://pe.heromc.net:4000/products/${item.id}`)\n                .then(res => { \n                    const isExists = (cartItems = [], item = {}) => {\n                        for (let cartItem of cartItems) {\n                            if (cartItem._id === item._id) {\n                                return cartItem;\n                            }\n                        }\n                        return false;\n                    }\n                    if (res.data) {\n                        res.data.amount = item.amount;\n                    }\n                    console.log(res.data) \n                    const virtualCart = [...res.data] \n                    if (res.data.length === 0) {\n                        virtualCart.push({...JSON.parse(value), count: 1})\n                    } else {\n                        if (!isExists(res.data, JSON.parse(value))) {\n                            virtualCart.push({...JSON.parse(value), count: 1})\n                        } else {\n                            for (let i = 0; i < virtualCart.length; i++) {\n                                if (virtualCart[i]._id === JSON.parse(value)._id) {\n                                    virtualCart[i].count += 1\n                                    break\n                                }\n                            }\n                        }\n                    }\n                    setProductList(virtualCart)\n                })\n            })\n        }\n    //     const productListTotal = []\n    //     for (let i in productList) { \n    //         for (let j in productList) {\n    //             if (productList[i].id === productList[i+1].id) {\n    //                 console.log(\"c\")\n    //             }\n    //         }\n    //     }\n    // }\n    }, [props.order])\n\n    // console.log(productList)\n\n    return (\n        <div className=\"chart flex-col\">\n            <div className=\"headerbox flex-center\">\n                <FontAwesomeIcon icon={faGlobe} className=\"icon\"/>\n            </div>\n            <div className=\"top-location-container\">\n                <div className=\"headerbox-header\">\n                    <p>Global Sales by Top Categories</p>\n                </div>\n                <div className=\"top-location-content flex\">\n                    <div className=\"top-location-map\">\n                        <Doughnut\n                            data={{\n                                labels: [\n                                    \"Africa\",\n                                    \"Asia\",\n                                    \"Europe\",\n                                    \"Latin America\",\n                                    \"North America\"\n                                ],\n                                datasets: [\n                                    {\n                                    label: \"Population (millions)\",\n                                    backgroundColor: [\n                                        \"#3e95cd\",\n                                        \"#8e5ea2\",\n                                        \"#3cba9f\",\n                                        \"#e8c3b9\",\n                                        \"#c45850\"\n                                    ],\n                                    data: [2478, 5267, 734, 784, 433]\n                                    }\n                                ]\n                            }}\n                            option={{\n                                title: {\n                                    display: true,\n                                    text: \"Predicted world population (millions) in 2050\"\n                                }\n                            }}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}