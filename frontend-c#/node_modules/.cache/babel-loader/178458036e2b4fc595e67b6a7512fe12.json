{"ast":null,"code":"var _jsxFileName = \"/Users/namduong/Documents/dev/shop-project/src/components/News/NewsBody.js\";\nimport React, { useEffect, useState } from 'react';\nimport '../../App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFacebookF, faTwitter, faInstagram, faGoogle } from '@fortawesome/free-brands-svg-icons';\nimport classNames from 'classnames';\nimport axios from 'axios';\nexport default function NewsBody() {\n  const [news, setNews] = useState([]);\n  const [isSearchFocus, setIsSearchFocus] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const newsPerPage = 5;\n  const [currentTab, setCurrentTab] = useState(-1);\n  const currentTabText = \"\";\n  useEffect(() => {\n    axios.get(`http://localhost:4000/news`).then(res => {\n      setNews(res.data);\n    });\n  }, []);\n  console.log(news);\n\n  const choosePage = event => {\n    window.scrollTo(0, 0);\n\n    if (Number(event.target.id) === 0) {\n      setCurrentPage(currentPage);\n    } else if (Number(event.target.id) === -1) {\n      if (currentPage > 1) {\n        setCurrentPage(currentPage - 1);\n      } else {\n        setCurrentPage(1);\n      }\n    } else if (Number(event.target.id) === 999) {\n      setCurrentPage(currentPage + 1);\n    } else {\n      setCurrentPage(Number(event.target.id));\n    }\n  }; // const topViews = (news.sort((a, b) => b.newView - a.newView)).slice(0,3); //Top view on Category\n  //Filt Posts depend on Category\n  // var filterNews = [];\n  // if (currentTab === -1) {\n  //     filterNews = news;\n  // } else if (currentTabText) {\n  //     filterNews = news.filter((item) => {\n  //         return item.newCate === currentTabText\n  //     })\n  // } else {\n  //     filterNews = news;\n  // }\n  //Panigation\n  // const indexOfLastNews = currentPage * newsPerPage;\n  // const indexOfFirstNews = indexOfLastNews - newsPerPage;\n  // const currentNews = filterNews.slice(indexOfFirstNews, indexOfLastNews);\n  // const firstPost = currentNews[0]; //Post of big image\n  // const nextPosts = currentNews.slice(1);\n  //Panigation button\n  // const pageNumbers = []; //Số trang được chia ra\n  // for (let i = 1; i <= Math.ceil(filterNews.length / newsPerPage); i++) {\n  //     pageNumbers.push(i);\n  // }\n  // const pages = [];\n  // if (currentPage === 2) {\n  //     pages.push(currentPage - 1, currentPage);\n  // } else {\n  //     if (currentPage === 1 && pageNumbers.length === 1) {\n  //         pages.push();\n  //     } else if (currentPage === 1 && currentPage < pageNumbers.length) {\n  //         pages.push(currentPage, currentPage + 1);\n  //     }else if (currentPage === 2) {\n  //         pages.push(currentPage - 1, currentPage);\n  //     } else if (currentPage > 2 && currentPage < pageNumbers.length - 1) {\n  //         pages.push(currentPage -1, currentPage);\n  //     } else if (currentPage === pageNumbers.length - 1) {\n  //         pages.push(currentPage - 1, currentPage);\n  //     } else {\n  //         pages.push(currentPage - 1, currentPage);\n  //     }\n  // }\n  // //Get all category\n  // const cate = Object.values(news.reduce((a, {newCate}) => {\n  //     a[newCate] = a[newCate] || {newCate, count: 0};\n  //     a[newCate].count++;\n  //     return a;\n  // }, Object.create(null)));\n  // //Sort and splice category by posts count\n  // cate.sort((a,b) =>  b.count - a.count)\n  // const splicedCate = cate.splice(0,5);\n  // splicedCate.sort((a, b) => b.count - a.count);\n  // const sortedCate = [];\n  // for (let i = 0; i < splicedCate.length; i++) {\n  //     sortedCate.push(splicedCate[i].newCate);\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"NewsBody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  });\n}","map":{"version":3,"sources":["/Users/namduong/Documents/dev/shop-project/src/components/News/NewsBody.js"],"names":["React","useEffect","useState","FontAwesomeIcon","faFacebookF","faTwitter","faInstagram","faGoogle","classNames","axios","NewsBody","news","setNews","isSearchFocus","setIsSearchFocus","currentPage","setCurrentPage","newsPerPage","currentTab","setCurrentTab","currentTabText","get","then","res","data","console","log","choosePage","event","window","scrollTo","Number","target","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,eAAP;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAAUC,WAAV,EAAuBC,SAAvB,EAAkCC,WAAlC,EAA+CC,QAA/C,QAA+D,oCAA/D;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,QAAT,GAAoB;AAC/B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAMe,WAAW,GAAG,CAApB;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,CAAC,CAAF,CAA5C;AACA,QAAMkB,cAAc,GAAG,EAAvB;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,KAAK,CAACY,GAAN,CAAW,4BAAX,EACKC,IADL,CACUC,GAAG,IAAI;AACTX,MAAAA,OAAO,CAACW,GAAG,CAACC,IAAL,CAAP;AACH,KAHL;AAKH,GANQ,EAMP,EANO,CAAT;AAOAC,EAAAA,OAAO,CAACC,GAAR,CAAYf,IAAZ;;AAEA,QAAMgB,UAAU,GAAIC,KAAD,IAAW;AAC1BC,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAkB,CAAlB;;AACA,QAAIC,MAAM,CAACH,KAAK,CAACI,MAAN,CAAaC,EAAd,CAAN,KAA4B,CAAhC,EAAmC;AAC/BjB,MAAAA,cAAc,CAACD,WAAD,CAAd;AACH,KAFD,MAEO,IAAIgB,MAAM,CAACH,KAAK,CAACI,MAAN,CAAaC,EAAd,CAAN,KAA4B,CAAC,CAAjC,EAAoC;AACvC,UAAIlB,WAAW,GAAG,CAAlB,EAAqB;AACjBC,QAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AACH,OAFD,MAEO;AACHC,QAAAA,cAAc,CAAC,CAAD,CAAd;AACH;AACJ,KANM,MAMA,IAAIe,MAAM,CAACH,KAAK,CAACI,MAAN,CAAaC,EAAd,CAAN,KAA4B,GAAhC,EAAqC;AACxCjB,MAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AACH,KAFM,MAEA;AACHC,MAAAA,cAAc,CAACe,MAAM,CAACH,KAAK,CAACI,MAAN,CAAaC,EAAd,CAAP,CAAd;AACH;AACJ,GAfD,CAjB+B,CAkC/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAuKH","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../../App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {  faFacebookF, faTwitter, faInstagram, faGoogle } from '@fortawesome/free-brands-svg-icons';\nimport classNames from 'classnames'\nimport axios from 'axios'\n\nexport default function NewsBody() {\n    const [news, setNews] = useState([]);\n    const [isSearchFocus, setIsSearchFocus] = useState(false);\n    const [currentPage, setCurrentPage] = useState(1);\n    const newsPerPage = 5;\n    const [currentTab, setCurrentTab] = useState(-1);\n    const currentTabText = \"\";\n\n    useEffect(() => {\n        axios.get(`http://localhost:4000/news`)\n            .then(res => {\n                setNews(res.data)\n            }\n        )\n    },[])\n    console.log(news)\n\n    const choosePage = (event) => {\n        window.scrollTo(0,0);\n        if (Number(event.target.id) === 0) {\n            setCurrentPage(currentPage)\n        } else if (Number(event.target.id) === -1) {\n            if (currentPage > 1) {\n                setCurrentPage(currentPage - 1)\n            } else {\n                setCurrentPage(1)\n            }\n        } else if (Number(event.target.id) === 999) {\n            setCurrentPage(currentPage + 1)\n        } else {\n            setCurrentPage(Number(event.target.id))\n        }\n    }\n\n    // const topViews = (news.sort((a, b) => b.newView - a.newView)).slice(0,3); //Top view on Category\n    \n    //Filt Posts depend on Category\n    // var filterNews = [];\n    // if (currentTab === -1) {\n    //     filterNews = news;\n    // } else if (currentTabText) {\n    //     filterNews = news.filter((item) => {\n    //         return item.newCate === currentTabText\n    //     })\n    // } else {\n    //     filterNews = news;\n    // }\n\n    //Panigation\n    // const indexOfLastNews = currentPage * newsPerPage;\n    // const indexOfFirstNews = indexOfLastNews - newsPerPage;\n    // const currentNews = filterNews.slice(indexOfFirstNews, indexOfLastNews);\n    // const firstPost = currentNews[0]; //Post of big image\n    // const nextPosts = currentNews.slice(1);\n\n    //Panigation button\n    // const pageNumbers = []; //Số trang được chia ra\n    // for (let i = 1; i <= Math.ceil(filterNews.length / newsPerPage); i++) {\n    //     pageNumbers.push(i);\n    // }\n    // const pages = [];\n    // if (currentPage === 2) {\n    //     pages.push(currentPage - 1, currentPage);\n    // } else {\n    //     if (currentPage === 1 && pageNumbers.length === 1) {\n    //         pages.push();\n    //     } else if (currentPage === 1 && currentPage < pageNumbers.length) {\n    //         pages.push(currentPage, currentPage + 1);\n    //     }else if (currentPage === 2) {\n    //         pages.push(currentPage - 1, currentPage);\n    //     } else if (currentPage > 2 && currentPage < pageNumbers.length - 1) {\n    //         pages.push(currentPage -1, currentPage);\n    //     } else if (currentPage === pageNumbers.length - 1) {\n    //         pages.push(currentPage - 1, currentPage);\n    //     } else {\n    //         pages.push(currentPage - 1, currentPage);\n    //     }\n    // }\n\n    // //Get all category\n    // const cate = Object.values(news.reduce((a, {newCate}) => {\n    //     a[newCate] = a[newCate] || {newCate, count: 0};\n    //     a[newCate].count++;\n    //     return a;\n    // }, Object.create(null)));\n    // //Sort and splice category by posts count\n    // cate.sort((a,b) =>  b.count - a.count)\n    // const splicedCate = cate.splice(0,5);\n    // splicedCate.sort((a, b) => b.count - a.count);\n    \n    // const sortedCate = [];\n    // for (let i = 0; i < splicedCate.length; i++) {\n    //     sortedCate.push(splicedCate[i].newCate);\n    // }\n\n    return(\n        <div className=\"NewsBody\">\n            {/* <div className=\"newsbanner-nav\">\n                <div\n                    className={currentTab === -1 ? \"newsbanner-nav-active\" : \"\"}\n                    onClick={() => {\n                        setCurrentTab(-1);\n                        setCurrentPage(1);\n                    }}\n                    >All Blog Posts\n                </div>\n                {sortedCate.map((item, index) => {\n                        return (\n                            <div\n                                key={index}\n                                id={index}\n                                className={currentTab === Number(index) ? \"newsbanner-nav-active\" : \"\"}\n                                onClick={(event) => {\n                                    this.setState({\n                                        currentTab: index, \n                                        currentTabText: event.currentTarget.textContent,\n                                        currentPage: 1\n                                    })\n                                }}\n                                >{item}\n                            </div>\n                        )\n                    })\n                }\n            </div>\n            <div className=\"newsbody-container\">\n                <div className=\"newsbody-post\">\n                    <div className=\"newsbody-big flex-center\">\n                        <img className=\"newsbody-big-img\" src={firstPost.newImg} alt=\"z\"/>\n                        <div className=\"newsbody-info flex-center\">\n                            <div className=\"newsbody-time\">{firstPost.newTime}</div>\n                            <div className=\"newsbody-cate\">{firstPost.newCate}</div>\n                        </div>\n                        <div className=\"newsbody-title\">{firstPost.newTitle}</div>\n                        <div className=\"newsbody-content\">{firstPost.newContent}</div>\n                        <div className=\"newsbody-link\">Read More</div>\n                        <div className=\"newsbody-smaill-line\"></div>\n                    </div>\n                    {nextPosts.map((item, index) => {\n                        return (\n                            <div className=\"newsbody-small\" key={index}> \n                                <div className=\"newsbody-small-container\">\n                                    <img className=\"newsbody-small-img\" src={item.newImg} alt=\"z\"/>\n                                    <div className=\"newsbody-small-left\">\n                                        <div className=\"newsbody-small-info flex-center\">\n                                            <div className=\"newsbody-time\">{item.newTime}</div>\n                                            <div className=\"newsbody-cate\">{item.newCate}</div>\n                                        </div>\n                                        <div className=\"newsbody-title\">{item.newTitle}</div>\n                                        <div className=\"newsbody-content\">{item.newContent}</div>\n                                        <div className=\"newsbody-link\">Read More</div>\n                                    </div>\n                                </div>\n                                <div className=\"newsbody-smaill-line\"></div>\n                            </div>\n                        )\n                    })}\n                    <div className=\"newspagnigation-container\">\n                        <div className=\"newspagnigation\" onClick={choosePage}>\n                            <div id=\"-1\" className={classNames({\n                                newspagnigation_disable: currentPage === 1\n                            })}>←</div>\n                            { pages.map(function(number, index) { \n                                if (currentPage === number) {\n                                    return (\n                                        <div key={number} id={number} className=\"newspagnigation-active\">\n                                            {number}\n                                        </div>\n                                    )\n                                } else {\n                                    return (\n                                    <div \n                                        key={number}\n                                        id={number}\n                                        >\n                                            {number}\n                                    </div>\n                                    )\n                                } \n                            })}\n                            <div id=\"999\" className={classNames({\n                                newspagnigation_disable: currentPage === pageNumbers.length\n                            })}>→</div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"newsbody-widget\">\n                    <div className=\"widget-search\">\n                        <div className=\"widget-title\">Search</div>\n                        <form className={ isSearchFocus === true ? \"widget-form widget_search_click\" : \"widget-form\"} \n                            onMouseEnter={() => { setIsSearchFocus(true)}}\n                            onMouseLeave={() => { setIsSearchFocus(false)}}>\n                            <input placeholder=\"Search the site\"></input>\n                            <button>Search</button>\n                        </form>\n                    </div>\n                    <div className=\"widget-pop\">\n                        <div className=\"widget-title\">Popular Posts</div>\n                        {\n                            topViews.map((item, index) => {\n                                return(\n                                    <div key={index} className=\"widget-post\">\n                                        <div className=\"widget-post-img\" style={{backgroundImage: `url(${item.newImg})`}}></div>\n                                        <div className=\"widget-post-info\">\n                                            <div className=\"widget-post-title\">{item.newTitle}</div>\n                                            <div className=\"widget-post-info2\">\n                                                <span className=\"widget-post-time\">{item.newTime}</span>\n                                                <span className=\"widget-post-view\">{item.newView} view</span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                    <div className=\"widget-cate\">\n                        <div className=\"widget-title\">Categorys</div>\n                        {\n                            splicedCate.map((item, index) => {\n                                return (\n                                    <div key={index} className=\"widget-cate-container\">\n                                        <div className=\"widget-cate-div\">\n                                            <div>{item.newCate}</div>\n                                            <div className=\"widget-cate-count\">{item.count}</div>\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                    <div className=\"widget-connect\">\n                        <div className=\"widget-title\">Stay Connected</div>\n                        <div className=\"widget-connect-container\">\n                            <div className=\"widget-icon\">\n                                <FontAwesomeIcon icon={faFacebookF}/>\n                            </div>\n                            <div className=\"widget-icon\">\n                                <FontAwesomeIcon icon={faTwitter}/>\n                            </div>\n                            <div className=\"widget-icon\">\n                                <FontAwesomeIcon icon={faInstagram}/>\n                            </div>\n                            <div className=\"widget-icon\">\n                                <FontAwesomeIcon icon={faGoogle}/>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"widget-newsletter\">\n                        <div className=\"widget-title\">Newsletter</div>\n                        <form className={ isSearchFocus === true ? \"widget-form widget_search_click\" : \"widget-form\"} \n                            onMouseEnter={() => { setIsSearchFocus(true)}}\n                            onMouseLeave={() => { setIsSearchFocus(false)}}>\n                            <input placeholder=\"Enter your email\"></input>\n                            <button>Send</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            <div className=\"newsbody-line\"></div> */}\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}