{"ast":null,"code":"var _jsxFileName = \"/Users/namduong/Documents/dev/shop-project/frontend/src/components/OpenChatBtn.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../Styles/Chat.css';\nimport '../App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faComment, faPaperPlane } from '@fortawesome/free-solid-svg-icons';\nimport socketIOClient from \"socket.io-client\";\nimport { withRouter } from 'react-router-dom';\nconst ENDPOINT = \"http://localhost:4000\";\n\nfunction OpenChatBtn(props) {\n  // const messageRef = useRef();\n  // const inputRef = useRef();\n  // const [openChat, setOpenChat] = useState(false)\n  // const [onHover, setOnHover] = useState(false)\n  // const [inputValue, setInputValue] = useState(\"\")\n  // const [openChatContent, setOpenChatContent] = useState(false)\n  // const socket = socketIOClient(ENDPOINT)\n  // const [chatList, setChatList] = useState([])\n  useEffect(() => {\n    if (sessionStorage.getItem('chat-id')) setOpenChatContent(true); // socket.on('connect', function (data) {\n\n    socket.emit('join', {\n      sessionId: sessionStorage.getItem('chat-id'),\n      isAdmin: false\n    }); //     socket.on('sendFirstInfo', (data)=> {\n    //         if (data.length > 0) setChatList(data[0].chatContent)\n    //     })\n    //     socket.on('thread', (data)=> {\n    //         setChatList(data.chatContent)\n    //     })\n    //     socket.on(\"admin-msg\", function(data) {\n    //         alert(\"checked\")\n    //         setChatList(chatList=> [...chatList, data]);\n    //         setTimeout(()=>{\n    //             messageRef.current.scrollIntoView({ behavior: \"smooth\" })\n    //         }, 100)\n    //     })\n    // })\n  }, []); // const handleChange = (event) => {\n  //     setInputValue({...inputValue , [event.target.name]: event.target.value})\n  // }\n  // const location = props.history.location.pathname;\n  // const sendFirstChatOnSubmit = (event) => {\n  //     event.preventDefault()\n  //     setOpenChatContent(true)\n  //     if (!sessionStorage.getItem('chat-id')) {\n  //         sessionStorage.setItem('chat-id', Math.floor(Math.random() * 190000000) + 100000000);\n  //     }\n  //     socket.emit('firstMessage', {\n  //         sessionId: sessionStorage.getItem('chat-id'),\n  //         chatName: inputValue.chatName,\n  //         chatEmail: inputValue.chatEmail,\n  //         chatContent: [\n  //             {\n  //                 text: inputValue.chatContent,\n  //                 time: new Date()\n  //             }\n  //         ]\n  //     })\n  //     setChatList(chatList=> [...chatList, {\n  //         text: inputValue.chatContent,\n  //         time: new Date()\n  //     }])\n  // }\n  // const sendChatOnSubmit = (event) => {\n  //     event.preventDefault();\n  //     socket.emit('messageSend', {\n  //         sessionId: sessionStorage.getItem('chat-id'),\n  //         text: inputValue.messageSend,\n  //         time: new Date(),\n  //     });\n  //     setChatList(chatList=> [...chatList, {text: inputValue.messageSend, time: new Date()}])\n  //     setTimeout(()=>{\n  //         messageRef.current.scrollIntoView({ behavior: \"smooth\" })\n  //     }, 100)\n  //     inputRef.current.value = \"\";\n  // }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default withRouter(OpenChatBtn);","map":{"version":3,"sources":["/Users/namduong/Documents/dev/shop-project/frontend/src/components/OpenChatBtn.js"],"names":["React","useEffect","useRef","useState","FontAwesomeIcon","faComment","faPaperPlane","socketIOClient","withRouter","ENDPOINT","OpenChatBtn","props","sessionStorage","getItem","setOpenChatContent","socket","emit","sessionId","isAdmin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAO,oBAAP;AACA,OAAO,YAAP;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,mCAAxC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,MAAMC,QAAQ,GAAG,uBAAjB;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACxB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIW,cAAc,CAACC,OAAf,CAAuB,SAAvB,CAAJ,EAAuCC,kBAAkB,CAAC,IAAD,CAAlB,CAD3B,CAEZ;;AACIC,IAAAA,MAAM,CAACC,IAAP,CAAY,MAAZ,EAAoB;AAChBC,MAAAA,SAAS,EAAEL,cAAc,CAACC,OAAf,CAAuB,SAAvB,CADK;AAEhBK,MAAAA,OAAO,EAAE;AAFO,KAApB,EAHQ,CAOZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GArBQ,EAqBN,EArBM,CAAT,CAXwB,CAkCxB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AA6EH;;AAED,eAAeV,UAAU,CAACE,WAAD,CAAzB","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport '../Styles/Chat.css'\nimport '../App.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faComment, faPaperPlane } from '@fortawesome/free-solid-svg-icons'\nimport socketIOClient from \"socket.io-client\"\nimport { withRouter } from 'react-router-dom'\n\nconst ENDPOINT = \"http://localhost:4000\";\n\nfunction OpenChatBtn(props) {\n    // const messageRef = useRef();\n    // const inputRef = useRef();\n    // const [openChat, setOpenChat] = useState(false)\n    // const [onHover, setOnHover] = useState(false)\n    // const [inputValue, setInputValue] = useState(\"\")\n    // const [openChatContent, setOpenChatContent] = useState(false)\n\n    // const socket = socketIOClient(ENDPOINT)\n    // const [chatList, setChatList] = useState([])\n\n    useEffect(() => {\n        if (sessionStorage.getItem('chat-id')) setOpenChatContent(true)\n        // socket.on('connect', function (data) {\n            socket.emit('join', {\n                sessionId: sessionStorage.getItem('chat-id'),\n                isAdmin: false\n            })\n        //     socket.on('sendFirstInfo', (data)=> {\n        //         if (data.length > 0) setChatList(data[0].chatContent)\n        //     })\n        //     socket.on('thread', (data)=> {\n        //         setChatList(data.chatContent)\n        //     })\n        //     socket.on(\"admin-msg\", function(data) {\n        //         alert(\"checked\")\n        //         setChatList(chatList=> [...chatList, data]);\n        //         setTimeout(()=>{\n        //             messageRef.current.scrollIntoView({ behavior: \"smooth\" })\n        //         }, 100)\n        //     })\n        // })\n    }, [])\n\n    // const handleChange = (event) => {\n    //     setInputValue({...inputValue , [event.target.name]: event.target.value})\n    // }\n    // const location = props.history.location.pathname;\n\n    // const sendFirstChatOnSubmit = (event) => {\n    //     event.preventDefault()\n    //     setOpenChatContent(true)\n    //     if (!sessionStorage.getItem('chat-id')) {\n    //         sessionStorage.setItem('chat-id', Math.floor(Math.random() * 190000000) + 100000000);\n    //     }\n    //     socket.emit('firstMessage', {\n    //         sessionId: sessionStorage.getItem('chat-id'),\n    //         chatName: inputValue.chatName,\n    //         chatEmail: inputValue.chatEmail,\n    //         chatContent: [\n    //             {\n    //                 text: inputValue.chatContent,\n    //                 time: new Date()\n    //             }\n    //         ]\n    //     })\n    //     setChatList(chatList=> [...chatList, {\n    //         text: inputValue.chatContent,\n    //         time: new Date()\n    //     }])\n    // }\n\n    // const sendChatOnSubmit = (event) => {\n    //     event.preventDefault();\n    //     socket.emit('messageSend', {\n    //         sessionId: sessionStorage.getItem('chat-id'),\n    //         text: inputValue.messageSend,\n    //         time: new Date(),\n    //     });\n    //     setChatList(chatList=> [...chatList, {text: inputValue.messageSend, time: new Date()}])\n    //     setTimeout(()=>{\n    //         messageRef.current.scrollIntoView({ behavior: \"smooth\" })\n    //     }, 100)\n    //     inputRef.current.value = \"\";\n    // }\n\n    return (\n        <div \n            // className={location === \"/admin\" || location === \"/admin/dashboard\" ? \"chat-btn displayNone\" : \"chat-btn\"}\n            // onMouseEnter={()=> { setOnHover(true) }}\n            // onMouseLeave={()=> { if (openChat) { setOnHover(true) } else setOnHover(false) }}\n        >\n            {/* <div \n                className={onHover ? \"chat-btn-container chat-btn-hover\" : \"chat-btn-container\"}\n                onClick={()=>{\n                    if (messageRef.current) messageRef.current.scrollIntoView({ behavior: \"smooth\" });\n                    if (openChat) { \n                        setOpenChat(false); \n                        setOnHover(false) \n                    } else { \n                        setOpenChat(true); \n                        setOnHover(true) \n                    }\n                }}\n                >\n                <FontAwesomeIcon icon={faComment}/>\n                <p>Live Chat</p>\n            </div> */}\n            {/* <div className={openChat ? \"chat-box hide_chat_box\" : \"chat-box\"}>\n                <div className=\"chat-box-header\">\n                    Live Chat\n                </div>\n                { openChatContent === false &&  \n                    <div className=\"chat-box-body\">\n                        <form onSubmit={sendFirstChatOnSubmit} className={openChat ? \"form-chat hide_chat_box_item\" : \"form-chat\"}>\n                            <label>Introduce yourself *</label>\n                            <input name=\"chatName\" type=\"text\" onChange={handleChange} placeholder=\"Name\" className=\"intro\" required></input>\n                            <input name=\"chatEmail\" type=\"text\" onChange={handleChange} placeholder=\"Email\" className=\"intro\" required></input>\n                            <label>Message *</label>\n                            <textarea name=\"chatContent\" type=\"textarea\" onChange={handleChange} className=\"message\" required></textarea>\n                            <button className=\"btn chat-box-body-btn\">Chat</button>\n                        </form>\n                    </div>\n                } */}\n                {/* { (chatList.length > 0 && openChatContent) && \n                    <div className=\"chat-box-body no-p\">\n                        <form onSubmit={sendChatOnSubmit} className={openChat ? \"form-chat hide_chat_box_item\" : \"form-chat\"}>\n                            \n                            <div className=\"flex-col chat-box-list\">\n                                {\n                                    chatList.map((item, index) => {\n                                        return (\n                                            <div key={index} ref={messageRef} className=\"chat-list\">\n                                                {\n                                                    item.fromAdmin !== true && \n                                                    <div className=\"clienttext\">\n                                                        <p>{item.text}</p>\n                                                    </div>\n                                                }\n                                                {\n                                                    item.fromAdmin === true && \n                                                    <div className=\"admintext\">\n                                                        <p>{item.text}</p>\n                                                    </div>\n                                                }\n                                            </div>\n                                        )\n                                    })\n                                }\n                            </div>  \n                            <div className=\"flex chat-box-send\">\n                                <input name=\"messageSend\" type=\"text\" onChange={handleChange} placeholder=\"Make a message\" ref={inputRef}></input>\n                                <button className=\"flex-center sendchat\">\n                                    <FontAwesomeIcon icon={faPaperPlane}/>\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                } */}\n            {/* </div> */}\n       \n        </div>\n    )\n}\n\nexport default withRouter(OpenChatBtn);"]},"metadata":{},"sourceType":"module"}